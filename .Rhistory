#
source('~/Google Drive/2016 Spring/Intro to Statistics/Homework/Code for simulation of lengths of longest runs.R')
longest.run(10)
longest.run(10)
longest.run(20)
longest.run(20)
longest.run(20)
#
# Function to generate coin flips n times and determine the longest run of
# heads or tails.
#
longest.run<-function(n)
{
# generate n Bernoulli trials with success probability 1/2
x<-rbinom(n,1,.5)
#
# determine the longest run
# compute successive differences
#
diffs<-diff(x)
#
# determine where difference is 1 or -1
#
change.positions<-seq(1:n-1)[abs(diff(x))==1]
#
# insert change positions at the ends (0 and n)
#
change.positions<-c(0,change.positions,n)
#
# return the maximum difference between change positions
#
x
max(diff(change.positions))
}
#
# Example. Do the experiment with 100 coin flips.
#
longest.run(100)
#
# Repeat the experiment where 100 coin flips 10,000 times.
#
# Create a vector with value 100 repeated 10,000 times
#
x<-rep(100,10000)
#
# Apply the longest run function to each element of x
#
# longest.runs<-sapply(x,longest.run)
# #
# # Estimate the expected value using the average of the longest.runs vector
# #
# mean(longest.runs)
#
# t<-seq(10,1000,by=10)
# y<-rep(0,100)
# ysd<-rep(0,100)
# for (m in 1:100)
# {
#   print(m)
#   x<-rep(t[m],10000)
#   longest.runs<-sapply(x,longest.run)
#   y[m]<-mean(longest.runs)
#   ysd[m]<-sd(longest.runs)
# }
# plot(t,y)
# lines(t,1.5*log(t))
# plot(t,ysd^2)
#
#
#
#
# Function to generate coin flips n times and determine the longest run of
# heads or tails.
#
longest.run<-function(n)
{
# generate n Bernoulli trials with success probability 1/2
x<-rbinom(n,1,.5)
#
# determine the longest run
# compute successive differences
#
diffs<-diff(x)
#
# determine where difference is 1 or -1
#
change.positions<-seq(1:n-1)[abs(diff(x))==1]
#
# insert change positions at the ends (0 and n)
#
change.positions<-c(0,change.positions,n)
#
# return the maximum difference between change positions
#
x
max(diff(change.positions))
}
#
# Example. Do the experiment with 100 coin flips.
#
longest.run(100)
#
# Repeat the experiment where 100 coin flips 10,000 times.
#
# Create a vector with value 100 repeated 10,000 times
#
x<-rep(100,10000)
#
# Apply the longest run function to each element of x
#
longest.runs<-sapply(x,longest.run)
#
# Estimate the expected value using the average of the longest.runs vector
#
mean(longest.runs)
t<-seq(10,1000,by=10)
y<-rep(0,100)
ysd<-rep(0,100)
for (m in 1:100)
{
print(m)
x<-rep(t[m],10000)
longest.runs<-sapply(x,longest.run)
y[m]<-mean(longest.runs)
ysd[m]<-sd(longest.runs)
}
plot(t,y)
lines(t,1.5*log(t))
plot(t,ysd^2)
source('~/Google Drive/2016 Spring/Intro to Statistics/Homework/hw1_2a.R')
x<-c(1:25)*10
x
#
# Function to generate coin flips n times and determine the longest run of
# heads or tails.
#
longest.run<-function(n)
{
# generate n Bernoulli trials with success probability 1/2
x<-rbinom(n,1,.5)
#
# determine the longest run
# compute successive differences
#
diffs<-diff(x)
#
# determine where difference is 1 or -1
#
change.positions<-seq(1:n-1)[abs(diff(x))==1]
#
# insert change positions at the ends (0 and n)
#
change.positions<-c(0,change.positions,n)
#
# return the maximum difference between change positions
#
x
max(diff(change.positions))
}
#
# Example. Do the experiment with 100 coin flips.
#
longest.run(100)
#
# Repeat the experiment where 100 coin flips 10,000 times.
#
# Create a vector with value 100 repeated 10,000 times
#
x<-rep(100,10000)
#
# Apply the longest run function to each element of x
#
longest.runs<-sapply(x,longest.run)
#
# Estimate the expected value using the average of the longest.runs vector
#
mean(longest.runs)
t.length
t<-c(1:25)*10
length(t)
t <- c(1:25)*10
longest.runs <- rep(0,25)
for (m in 1:length(t)) {
x <- rep(t[m], 10000)
longest.runs[m] <- sapply(x, longest.run(t[m]))
}
source('~/Google Drive/2016 Spring/Intro to Statistics/Homework/hw1_2a.R')
source('~/Google Drive/2016 Spring/Intro to Statistics/Homework/hw1_2a.R')
plot(t,a)
lines(t,1.5*log(t))
lines(t,0.5*log(t))
lines(t,3*log(t))
n <- c(1:25)*10
plot(n,a)
plot(n,a,xlim=c(0, 260), ylim=c(0, 10))
plot(t,ysd^2)
t<-seq(10,1000,by=10)
ysd<-rep(0,100)
x
lines(n,3*log(n))
lines(n,0.1*log(n))
lines(n,0.5*log(n))
plot(n,a,xlim=c(0, 260), ylim=c(0, 10))
lines(n,0.5*log(n))
plot(n,a,xlim=c(0, 260), ylim=c(0, 10))
lines(n,0.8*log(n))
n
a
x<-rep(100,10000)
#
# Apply the longest run function to each element of x
#
longest.runs<-sapply(x,longest.run)
#
# Estimate the expected value using the average of the longest.runs vector
#
mean(longest.runs)
length(a)
source('~/Google Drive/2016 Spring/Intro to Statistics/Homework/hw1_2a.R')
source('~/Google Drive/2016 Spring/Intro to Statistics/Homework/hw1_2a.R')
source('~/Google Drive/2016 Spring/Intro to Statistics/Homework/hw1_2a.R')
warnings()
longest.runs.length
length(longest.runs)
longest.runs
a
a
m
a[0]
a[1]
lines(t,1.5*log(t))
lines(t,1*log(t))
lines(t,1.3*log(t))
source('~/Google Drive/2016 Spring/Intro to Statistics/Homework/hw1_2a.R', echo=TRUE)
warnings()
x<-rep(100,10000)
#
# Apply the longest run function to each element of x
#
longest.runs<-sapply(x,longest.run)
#
# Estimate the expected value using the average of the longest.runs vector
#
mean(longest.runs)
length(longest.runs)
size
B = matrix(0,2,2)
B[1,:]
B[1]
B = [1 2; 3 4]
B = c[1 2; 3 4]
B = matrix(c(1, 3, 2, 4), 2, 2)
B = matrix(c(1, 2, 3, 4), 2, 2)
B
t[B]
B <- t(B)
B
B[1,]
source('~/Google Drive/2016 Spring/Intro to Statistics/Homework/hw1_2a.R', echo=TRUE)
length(longest.runs)
dim(longest.runs)
dim(B)
dim(B) <- 2
source('~/Google Drive/2016 Spring/Intro to Statistics/Homework/hw1_2a.R', echo=TRUE)
lines(t,3*log(t))
lines(t,2.2*log(t))
lines(t,2*log(t))
lines(t,1.6*log(t))
lines(t,1.5*log(t))
lines(t,1.55*log(t))
source('~/Google Drive/2016 Spring/Intro to Statistics/Homework/hw1_2a.R', echo=TRUE)
help.var()
help(var)
varX
length(a)
longest.runs[m, ]
m
varX = rep(0, 25)
for (m in 1:length) {
varX[m] = var(longest.runs[m,])
}
varX = rep(0, 25)
for (m in 1:length(varX)) {
varX[m] = var(longest.runs[m,])
}
varX
plot(t,varX,"main = Plot of V(X) vs n")
plot(t,varX)
1.5*log(500)
a[25]
varX = rep(0, 25)
for (m in 1:length) {
varX[m] = var(longest.runs[m,])
}
plot(t,varX)
varX = rep(0, 25)
for (m in 1:length(varX)) {
varX[m] = var(longest.runs[m,])
}
plot(t,varX)
varX = rep(0, 25)
for (m in 1:length(varX)) {
varX[m] = var(longest.runs[m,])
}
plot(t,varX)
varX = rep(0, 25)
for (m in 1:length(varX)) {
varX[m] = var(longest.runs[m,])
}
plot(t,varX)
help(plot)
flips of a fair coin",
xlim = c(0, 260), ylim = c(0, 10))
plot(t, a, main = " Plot of mean of longest run vs flips of a fair coin",
xlim = c(0, 260), ylim = c(0, 10))
lines(t,1.5*log(t))
help(plot)
plot(t, a, main = " Plot of mean of longest run vs flips of a fair coin",
xlim = c(0, 260), ylim = c(0, 10),
ylab = "Average of longest run of heads or tails",
xlab = "Number of flips of a fair coin")
lines(t,1.5*log(t))
varX, main = "Plot of V(X) vs n",
xlab = "Number of flips of a fair coin",
ylab = "Estiamted V(X) using sample variances")
plot(t, varX, main = "Plot of V(X) vs n",
xlab = "Number of flips of a fair coin",
ylab = "Estiamted V(X) using sample variances")
source('~/Google Drive/2016 Spring/Intro to Statistics/Homework/HW 1/Code for simulation of lengths of longest runs.R', echo=TRUE)
source('~/Google Drive/2016 Spring/Intro to Statistics/Homework/HW 1/Code for simulation of lengths of longest runs.R', echo=TRUE)
help(sd)
help(log)
1.5*log(500)
fam
fam <- read.csv(file="families.csv",head=TRUE,sep=",")
fam <- read.csv(file="families.csv",head=TRUE,sep=",")
?rm
rm(n,size)
rm()
rm(B)
ls()
rm(ls)
rm(ls())
install.packages("KernSmooth")
library(KernSmooth)
getwd
getwd()
setwd("/Users/williamshyr/Documents/Coursera/datasciencecoursera")
getwd()
getwd()
